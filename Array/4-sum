using 3 for loops

class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        int n= nums.length;
        List<List<Integer>> list= new ArrayList<>();
        Set<List<Integer>> listSet= new HashSet<>();
       
        for(int i=0; i<n-2; i++){
            for(int j=i+1; j<n-1; j++){
                 Set<Integer> set= new HashSet<>();
                for(int k=j+1; k<n; k++){
                    long sum= nums[i]+nums[j];
                    sum= sum+nums[k];
                    long fourth= target-sum;
                    if(set.contains(fourth)){
                    List<Integer> l= new ArrayList<>();
                    l.add(nums[i]);
                    l.add(nums[j]);
                    l.add(nums[k]);
                    l.add(fourth);
                    Collections.sort(l);
                    listSet.add(l);
                    }
                   
                    set.add(nums[k]);
                }
            }
        }

        for(List<Integer> l: listSet){
            list.add(l);
        }
        return list;
    }
}



optimal solution

class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>> ans= new ArrayList<>();
        int n= nums.length;
        Arrays.sort(nums);
        for(int i=0; i<n; i++){
            if(i>0 && nums[i]==nums[i-1]) continue;
            for(int j=i+1; j<n; j++){
                if(j!=i+1 && nums[j]==nums[j-1]) continue;
                int k= j+1;
                int l= n-1;
                while(k<l){
                    long sum= nums[i];
                    sum= sum+nums[j];
                    sum= sum+nums[k];
                    sum= sum+nums[l];
                    if(sum==target){
                        List<Integer> list= new ArrayList<>();
                        list.add(nums[i]);
                        list.add(nums[j]);
                        list.add(nums[k]);
                        list.add(nums[l]);
                         ans.add(list);
                        k++;
                        l--;
                        while(k<l && nums[k]==nums[k-1]) k++;
                        while(k<l && nums[l]==nums[l+1]) l--;
                    }
                    else if(sum<target){
                       k++;
                    }
                    else{
                        l--;
                    }
                   
                }
            }
        }
        return ans;
    }
}
